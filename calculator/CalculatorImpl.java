/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tsystems.javaschool.tasks;

import java.math.BigDecimal;

/**
 *
 * @author —Ç–æ—à–∏–±–∞
 */
public class CalculatorImpl implements Calculator {

    public static String str;
    char[] mass;
    double[] operands;
    int[][] operations;
    int isempty, quantity;
    boolean isNull = false;

   public  CalculatorImpl() {
    }

    public static void main(String[] args) {
        Calculator c = new CalculatorImpl();
        System.out.println(c.evaluate("(-2)*((3-4)*(-1+6)+1)/4"));
    }

    @Override
    public String evaluate(String statement) {
        int j, i;
        isempty = -1;
        quantity = 0;
        j = (int) statement.length();
        mass = new char[j];
        statement.getChars(0, j, mass, 0);
        if (!verifyStr(mass)) { 
            return null;
        }
        if (quantity == 0) {    
            return statement;
        }
        if ((quantity == 1) & (mass[0] == '-')) {
            return statement;
        }
        transformStr(mass, mass.length + 1, quantity);
        
        double res = getResult(quantity);  µ–Ω–∏–µ           
        if (isNull) {                             
            return null;
        }
        statement = statement.valueOf(
                new BigDecimal(res).setScale(4, BigDecimal.ROUND_UP));// –æ–∫—Ä—É–≥–ª—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
        return statement;
    }

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö
    // —Å–∫–æ–±–æ–∫;–µ—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–Ω–∞—á–µ false
    
    private boolean verifyStr(char[] mass) {
        int i, summ;
        summ = 0;
        for (i = 0; i < mass.length; i++) {
            if (mass[i] == '(') {
                summ++;
            }
            if (mass[i] == ')') {
                summ--;
            }
            if (summ < 0) {
                return false;
            }
            if (i < mass.length - 1) {

                if (mass[i] == '(') {
                    if (!((mass[i + 1] == '0') | (mass[i + 1] == '1')
                            | (mass[i + 1] == '2') | (mass[i + 1] == '3') | (mass[i + 1] == '4')
                            | (mass[i + 1] == '5') | (mass[i + 1] == '6')
                            | (mass[i + 1] == '7') | (mass[i + 1] == '8')
                            | (mass[i + 1] == '9') | (mass[i + 1] == '(') | (mass[i + 1] == '-'))) {
                        return false;
                    }
                }

                if (mass[i] == ')') {
                    if (!((mass[i + 1] == '*') | (mass[i + 1] == '/')
                            | (mass[i + 1] == '+') | (mass[i + 1] == '-') | (mass[i + 1] == ')'))) {
                        return false;
                    }
                }

                if (mass[i] == '.') {
                    if (!((mass[i + 1] == '0') | (mass[i + 1] == '1')
                            | (mass[i + 1] == '2') | (mass[i + 1] == '3') | (mass[i + 1] == '4') | (mass[i + 1] == '5') | (mass[i + 1] == '6')
                            | (mass[i + 1] == '7') | (mass[i + 1] == '8') | (mass[i + 1] == '9'))) {
                        return false;
                    }
                }

                if ((mass[i] == '*') | (mass[i] == '/') | (mass[i] == '-') | (mass[i] == '+')) {
                    if ((mass[i + 1] == '*') | (mass[i + 1] == '/')
                            | (mass[i + 1] == '+') | (mass[i + 1] == '-') | (mass[i + 1] == ')') | (mass[i + 1] == '.')) {
                        return false;
                    }
                }

                if (((mass[i + 1] == '0') | (mass[i + 1] == '1')
                        | (mass[i + 1] == '2') | (mass[i + 1] == '3') | (mass[i + 1] == '4') | (mass[i + 1] == '5') | (mass[i + 1] == '6')
                        | (mass[i + 1] == '7') | (mass[i + 1] == '8') | (mass[i + 1] == '9'))) {
                    if (mass[i + 1] == '(') {
                        return false;
                    }
                }
            };

            if ((mass[0] == '*') | (mass[0] == '/') | (mass[0] == '+')) {
                return false;
            }

            if ((mass[mass.length - 1] == '*') | (mass[mass.length - 1] == '/')
                    | (mass[mass.length - 1] == '+') | (mass[mass.length - 1] == '-')) {
                return false;
            }

            if ((mass[i] == '*') | (mass[i] == '/') | (mass[i] == '-')
                    | (mass[i] == '+') | (mass[i] == '(') | (mass[i] == ')')) {
                quantity++;
            }
        }
        if (summ > 0) {
            return false;
        }
        return true;
    }

    // —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ - –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ int –∏ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ —Ç–∏–ø–∞ double
    
    private void transformStr(char[] mass, int size1, int size2) {
        operands = new double[size1];
        operations = new int[size2][3];
        int i = 0;
        int j = 0;
        int number = 0;//–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        int number1 = 0;//–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞–Ω–¥–∞
        String str1;
        for (number = 0; number < size2; number++) {
            if ((i == 0) & (mass[0] == '(')) { // –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–π –∏–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–æ—á–∫–∞
                operations[number][0] = -1;     // -1 —ç—Ç–æ '('; -2 —ç—Ç–æ ')'; -3 —ç—Ç–æ "*"; -4 —ç—Ç–æ '/';-5 —ç—Ç–æ '+'; -6 —ç—Ç–æ '-';
                operations[number][1] = -1; // -1 —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞
                i = 1;
                j = i;
                number++;
            }
            if ((i == 0) & (mass[0] == '-')) { //–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–º –∏–¥–µ—Ç "-" 
                operations[number][0] = -3;     // -1 —ç—Ç–æ '('; -2 —ç—Ç–æ ')'; -3 —ç—Ç–æ "*"; -4 —ç—Ç–æ '/';-5 —ç—Ç–æ '+'; -6 —ç—Ç–æ '-';
                operations[number][1] = number1; // –ø–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ = -1;
                operands[number1] = -1;
                number1++;
                i = 1;
                j = i;
                number++;
            }
            while ((!(mass[i] == '(')) & (!(mass[i] == ')'))// –∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                    & (!(mass[i] == '*')) & (!(mass[i] == '/'))
                    & (!(mass[i] == '+')) & (!(mass[i] == '-')) & (i < mass.length)) {
                i++;
            }
            if (i == j) {// –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç —Å–ª–µ–¥–æ–º –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π, —Ç–æ –µ—Å—Ç—å —É —ç—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç –ø—Ä–∞–≤–æ–≥–æ –∏ –ª–µ–≤–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
                operations[number][1] = -1;
                operations[number - 1][2] = -1;// -1 - –∑–Ω–∞—á–∏—Ç –≤—Ç–æ—Ä–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞ –Ω–µ—Ç
                if ((mass[i] == '-') & (mass[i - 1] == '(')) {//–µ—Å–ª–∏ –∑–∞ "("–∏–¥–µ—Ç "-", —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ -1
                    mass[i] = '*';
                    operands[number1] = -1;
                    operations[number][1] = number1;
                    operations[number - 1][2] = number1;
                    number1++;
                }
            } else { //—Å–ª–µ–¥—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–¥–µ—Ç –Ω–µ —Å—Ä–∞–∑—É, —Ç.–µ. –º–µ–∂–¥—É –Ω–∏–º–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞–Ω–¥
                str1 = new String(mass, j, i - j);//–≤—ã–¥–µ–ª—è–µ–º  —ç—Ç–æ—Ç –æ–ø–µ—Ä–∞–Ω–¥ 
                Double dbl = new Double(str1); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Ç–∏–ø double
                operands[number1] = dbl;// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤–µ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
                operations[number][1] = number1;// c–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞ —É —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                if (number > 0) {
                    operations[number - 1][2] = number1;// c–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∂–µ –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –≤—Ç–æ—Ä–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞
                    //—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                }
                number1++;
            }

            switch (mass[i]) {                    //—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                case '(':
                    operations[number][0] = -1;
                    break;
                case ')':
                    operations[number][0] = -2;
                    break;
                case '*':
                    operations[number][0] = -3;
                    break;
                case '/':
                    operations[number][0] = -4;
                    break;
                case '+':
                    operations[number][0] = -5;
                    break;
                case '-':
                    operations[number][0] = -6;
                    break;
            }
            i++;
            j = i;
        }
        if (operations[number - 1][0] == -2) {//–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è —ç—Ç–æ ")"
            operations[number - 1][2] = -1; // -1 —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞
        } else {
            str1 = new String(mass, j, mass.length - j);// –µ—Å–ª–∏ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–¥–µ—Ç –æ–ø–µ—Ä–∞–Ω–¥ 
            Double dbl = new Double(str1);// –ø–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            operands[size1 - 1] = dbl;
            operations[number - 1][2] = size1 - 1;
        }
    }

    //—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —Å–∫–æ–±–æ—á–µ–∫)
    // begin - –Ω–æ–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞ –≤—Ö–æ–¥—è—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ end - –≤—ã—Ö–æ–¥—è—â–µ–π-1
   
    private double calculate(int begin, int end) {
        int i, j;
        int max;
        int prevmax;// 
        double result = 0;
        boolean iscalculated = false;

        while (!iscalculated) { //–ø–æ–∫–∞ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            max = -1;
            prevmax = -1;// –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ; -1 - –Ω–µ—Ç —Ç–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            for (i = begin; i < end; i++) {// –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                if ((operations[i][0] == -3) | (operations[i][0] == -4)) {
                    max = 2;//2 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É "*" –∏ "/"
                    prevmax = i;// –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                }
                if ((operations[i][0] == -5) | (operations[i][0] == -6)) {
                    if (max == -1) {
                        max = 1;// –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 —É "-" "+"
                        prevmax = i;
                    }
                } 
            }
            if (prevmax > -1) {      //–µ—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–∏—Ä–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ –≤—ã–ø–æ–Ω—è–µ–º –µ–µ
                switch (operations[prevmax][0]) {   //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è
                    case -3:
                        result = operands[operations[prevmax][1]]   //–≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                                * operands[operations[prevmax][2]];
                        operations[prevmax][0] = -10;   // "–æ–±–Ω—É–ª—è–µ–º —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é"
                        isempty = operations[prevmax][2];// –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Å–≤–æ–±–æ–¥–∏–≤—à–µ–≥–æ—Å—è –æ–ø–µ—Ä–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        operands[operations[prevmax][1]] = result;//—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –ø–µ—Ä–≤–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞
                        for (j = prevmax; j > 0; j--) {//–∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                            if (j > 0) {
                                if (operations[j - 1][0] > -9) {
                                    operations[j - 1][2] = operations[prevmax][1];// –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ 
                                    //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                                    break;
                                }
                            }
                        }
                        for (j = prevmax; j < end; j++) {//–∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é 
                            if (j < end - 1) {
                                if (operations[j + 1][0] > -9) {
                                    operations[j + 1][1] = operations[prevmax][1];//–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                                   //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–π  
                                    break;
                                }
                            }
                        }
                        break;
                    //    —Ç–æ–∂–µ —Å–∞–º–æ–µ –¥–µ–ª–∞–µ–º –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    case -4:
                        if (operands[operations[prevmax][2]] == 0) {
                            isNull = true; // –Ω–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è
                        }
                        result = operands[operations[prevmax][1]]
                                / operands[operations[prevmax][2]];
                        operations[prevmax][0] = -10;
                        isempty = operations[prevmax][2];
                        operands[operations[prevmax][1]] = result;
                        for (j = prevmax; j > begin; j--) {
                            if (j > 0) {
                                if (operations[j - 1][0] > -9) {
                                    operations[j - 1][2] = operations[prevmax][1];
                                    break;
                                }
                            }
                        }
                        for (j = prevmax; j < end; j++) {
                            if (j < end - 1) {
                                if (operations[j + 1][0] > -9) {
                                    operations[j + 1][1] = operations[prevmax][1];
                                    break;
                                }
                            }
                        }
                        break;
                    case -5:
                        result = operands[operations[prevmax][1]]
                                + operands[operations[prevmax][2]];
                        operations[prevmax][0] = -10;
                        isempty = operations[prevmax][2];
                        operands[operations[prevmax][1]] = result;
                        for (j = prevmax; j > begin; j--) {
                            if (j > begin) {
                                if (operations[j - 1][0] > -9) {
                                    operations[j - 1][2] = operations[prevmax][1];
                                    break;
                                }
                            }
                        }
                        for (j = prevmax; j < end; j++) {
                            if (j < end - 1) {
                                if (operations[j + 1][0] > -9) {
                                    operations[j + 1][1] = operations[prevmax][1];
                                    break;
                                }
                            }
                        }
                        break;
                    case -6:
                        result = operands[operations[prevmax][1]]
                                - operands[operations[prevmax][2]];
                        operations[prevmax][0] = -10;
                        isempty = operations[prevmax][2];
                        operands[operations[prevmax][1]] = result;
                        for (j = prevmax; j > 0; j--) {
                            if (j > 0) {
                                if (operations[j - 1][0] > -9) {
                                    operations[j - 1][2] = operations[prevmax][1];
                                    break;
                                }
                            }
                        }
                        for (j = prevmax; j < end; j++) {
                            if (j < end - 1) {
                                if (operations[j + 1][0] > -9) {
                                    operations[j + 1][1] = operations[prevmax][1];
                                    break;
                                }
                            }
                        }
                        break;
                }
            }
            if (prevmax == -1) {//–µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                iscalculated = true;//–∑–Ω–∞—á–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω
            }
        }
        return result;
    }

   // –≠—Ç–æn –º–µ—Ç–æ–¥ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–∏ —ç—Ç–æ–º –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏  —Å–∫–æ–±–æ—á–µ–∫
   // –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ calculate(int begin, int end).
    
    private double getResult(int size) {
        int i, j, k, d;
        int prevmax, nextmax;
        double result = 0;
        boolean iscalculated = false;
        boolean b;
        while (!iscalculated) {//–ø–æ–∫–∞ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            prevmax = -10;//–∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            nextmax = -10;//–∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            for (i = 0; i < size; i++) {
                if (operations[i][0] == -1) { // –∏—â–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–æ—á–∫–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
                    prevmax = i;
                }
            }
            if (!(prevmax == -10)) {
                operations[prevmax][0] = -10;//"–æ–±–Ω—É–ª—è–µ–º" –µ–µ
            }
            if (prevmax > -1) {
                j = prevmax;
                while ((nextmax == -10)) {// –∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–æ—á–∫—É
                    j++;
                    if ((operations[j][0] == -2)) {
                        operations[j][0] = -10;//"–æ–±–Ω—É–ª—è–µ–º" –µ–µ
                        nextmax = j;// –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
                    }
                }
       result = calculate(prevmax + 1, nextmax);// –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ calculate –∏ —Å—á–∏—Ç–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ—á–µ–∫
       operands[isempty] = result;//—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –æ–ø–µ—Ä–∞–Ω–¥–µ,–∏–Ω–¥–µ–∫—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤ isempty 
                k = prevmax;
                b = false;
                while (!b) {
                    if (k > 0) {
                        if (operations[k - 1][0] > -9) {
                            operations[k - 1][2] = isempty;//—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥ 
                            //—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π  –æ–ø–µ—Ä–∞—Ü–∏–∏
                            b = true;
                        }
                    }
                    if (k == 0) {
                        b = true;
                    }
                    k--;
                }
                k = nextmax;
                b = false;
                while (!b) {
                    if (k < size - 1) {
                        if (operations[k + 1][0] > -9) {
                            operations[k + 1][1] = isempty;//—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –ø–µ—Ä–≤—ã–π 
                            //–æ–ø–µ—Ä–∞–Ω–¥ —É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                            b = true;
                        }
                    }
                    if (k == size) {
                        b = true;
                    }
                    k++;
                }
            }
            if (prevmax == -10) {// –µ—Å–ª–∏ —Å–∫–æ–±–æ—á–µ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç , —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—á—Ç–∏ –ø–æ—Å—á–∏—Ç–∞–Ω
                iscalculated = true;
            }
        }
        for (i = 0; i < size; i++) {//–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –Ω–µ "–æ–±–Ω—É–ª–µ–Ω–Ω—ã–µ" –æ–ø–µ—Ä–∞—Ü–∏–∏ , —Ç–æ
            // –¥–æ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ calculate
            if (operations[i][0] > -9) {
                result = calculate(0, size);
            }
        }
        return result;
    }
}
